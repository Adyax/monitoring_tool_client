<?php

/**
 * @file
 * Monitoring tool client module.
 */

/**
 * Key of variable with general settings.
 */
define('MONITORING_TOOL_CLIENT_CONFIG', 'monitoring_tool');

/**
 * Key of variable with general configuration.
 */
define('MONITORING_TOOL_CLIENT_SETTINGS', 'monitoring_tool_client.settings');

/**
 * Key of variable with time of the last execution.
 */
define('MONITORING_TOOL_CLIENT_LAST_EXECUTION', 'monitoring_tool_client.last_execution');

/**
 * Monitoring Tool server API version.
 */
define('MONITORING_TOOL_CLIENT_API_VERSION', 'v1');

/**
 * Monitoring tool secure token.
 */
define('MONITORING_TOOL_CLIENT_SECURE_TOKEN', 'monitoring-tool-token');

/**
 * Implements hook_menu().
 */
function monitoring_tool_client_menu() {
  $items = array();

  $items['admin/config/services/monitoring-tool-client'] = array(
    'title' => 'Monitoring tool: Client',
    'description' => 'Monitoring tool: Client - settings form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monitoring_tool_client_settings_form'),
    'file' => 'monitoring_tool_client.admin.inc',
    'access arguments' => array(
      'monitoring tool client settings',
    ),
  );

  $items['monitoring-tool/api/v1/%/webhook'] = array(
    'title' => 'Webhook callback',
    'page callback' => 'monitoring_tool_client_webhook',
    'page arguments' => array(3),
    'file' => 'monitoring_tool_client.webhook.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'monitoring_tool_client_check_access',
    'access arguments' => array(3),
  );

  $items['monitoring-tool/api/v1/%/test'] = array(
    'title' => 'Connection test',
    'page callback' => 'monitoring_tool_client_connection_test',
    'page arguments' => array(),
    'file' => 'monitoring_tool_client.connection_test.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'monitoring_tool_client_check_access',
    'access arguments' => array(3),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function monitoring_tool_client_permission() {
  $items = array();

  $items['monitoring tool client settings'] = array(
    'title' => t('Configure Monitoring tool Client'),
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function monitoring_tool_client_cron() {
  $last_execution = variable_get(MONITORING_TOOL_CLIENT_LAST_EXECUTION, 0);
  $config = variable_get(MONITORING_TOOL_CLIENT_SETTINGS);

  if (
    empty($config['webhook']) &&
    !empty($config['project_id']) &&
    !empty($config['secure_token']) &&
    REQUEST_TIME > $last_execution + $config['report_interval']
  ) {
    monitoring_tool_client_send_modules();
    variable_set(
      MONITORING_TOOL_CLIENT_LAST_EXECUTION,
      REQUEST_TIME
    );
  }
}

/**
 * Will filter all drupal core and custom modules or themes projects.
 *
 * It is callback of array_filter.
 *
 * @param object $module
 *   Project data.
 *
 * @return bool
 *   Filter value.
 */
function monitoring_tool_client_filter_contrib_projects($module) {
  $info = isset($module->info) ? $module->info : [];

  if (
    isset($info['project']) &&
    // Will ignore the drupal core modules.
    $info['project'] !== 'drupal' &&
    // Will ignore the modules that are located in the same folder.
    $module->name === $info['project'] &&
    // Will ignore the child modules.
    basename(dirname($module->filename)) === $info['project']
  ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Will return list of all modules and drupal core.
 *
 * @return array
 *   List of modules and Drupal.
 */
function monitoring_tool_client_get_modules() {
  $result = array();
  $config = variable_get(MONITORING_TOOL_CLIENT_SETTINGS);
  $module_enabled_list = system_list('module_enabled');
  $module_list = array_filter(
    system_rebuild_module_data(),
    'monitoring_tool_client_filter_contrib_projects'
  );

  $result['drupal'] = [
    'machine_name' => 'drupal',
    'name' => 'Drupal core',
    'core' => DRUPAL_CORE_COMPATIBILITY,
    'version' => VERSION,
    'status' => TRUE,
    'skip_updates' => FALSE,
  ];

  foreach ($module_list as $module_name => $module_data) {
    $info = isset($module_data->info) ? $module_data->info : [];
    $result[$module_name] = array(
      'machine_name' => $info['project'],
      'name' => $info['name'],
      'core' => DRUPAL_CORE_COMPATIBILITY,
      'version' => $info['version'],
      'status' => !empty($module_enabled_list[$info['project']]),
      'skip_updates' => !empty($config['skip_updates'][$info['project']]),
    );
  }

  return $result;
}

/**
 * Will send the modules to monitoring tool server.
 */
function monitoring_tool_client_send_modules() {
  monitoring_tool_client_server_connector('POST', array(
    'modules' => monitoring_tool_client_get_modules(),
  ));
}

/**
 * Will send data to server.
 *
 * @param string $method
 *   HTTP method.
 * @param array $data
 *   Array data to send.
 * @param string $action
 *   Type of the action.
 *
 * @return object
 *   Response object.
 */
function monitoring_tool_client_server_connector($method = 'POST', array $data = array(), $action = 'input') {
  $config = variable_get(MONITORING_TOOL_CLIENT_SETTINGS);
  $setting = array_merge(array('headers' => array()), variable_get(MONITORING_TOOL_CLIENT_CONFIG));
  $url = rtrim($setting['base_url'], '/');
  $url .= '/monitoring-tool/api/' . MONITORING_TOOL_CLIENT_API_VERSION . '/' . $config['project_id'] . '/' . $action;

  $options = array(
    'headers' => array(
        MONITORING_TOOL_CLIENT_SECURE_TOKEN => $config['secure_token'],
      ) + $setting['headers'],
    'method' => $method,
    'data' => $data ? drupal_json_encode($data) : NULL,
  );

  return drupal_http_request($url, $options);
}

/**
 * Will check access to the project.
 *
 * @param $project_hash
 *   Project hash ID.
 *
 * @return bool
 *   Access boolean value.
 */
function monitoring_tool_client_check_access($project_hash) {
  $config = variable_get(MONITORING_TOOL_CLIENT_SETTINGS);
  $secure_token_key = 'HTTP_' . strtoupper(str_replace('-', '_', MONITORING_TOOL_CLIENT_SECURE_TOKEN));
  $secure_token = isset($_SERVER[$secure_token_key]) ? $_SERVER[$secure_token_key] : '';

  if (
    $config['webhook'] &&
    $config['project_id'] !== '' &&
    $config['secure_token'] !== '' &&
    $project_hash === $config['project_id'] &&
    $secure_token === $config['secure_token']
  ) {
    return TRUE;
  }

  return FALSE;
}
